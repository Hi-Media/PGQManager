<?xml version="1.0" encoding="UTF-8"?>
<project name="Symfony2 :: Release Management" default="start" basedir="." description="Symfony2 deployment">

    <target name="start" description="Start Release">
        <echo message="Deployment console"/>
        <echo message="**************************"/>
        <echo message="Commands:"/>
        <echo message=" check:requirements"/>
        <echo message=" check:properties"/>
        <echo message=" deploy"/>
        <echo message=" update:shared_files"/>
        <echo message="**************************"/>
    </target>

    <target name="check:properties" description="Check Phing Configuration">
        <property name="propertyfile" value="app/config/property.properties"/>

        <echo message="---> Checking all Phing properties"/>

        <property file="${propertyfile}"/>
        <available file="${propertyfile}" property="propertyfilefound" value="true"/>
        <fail unless="propertyfilefound" message="Missing configuration file (${propertyfile})!"/>

        <!-- Looking for mandatory properties -->
        <if>
            <not>
                <isset property="host.servername"/>
            </not>
            <then>
                <fail message="Missing host.servername property!"/>
            </then>
        </if>
        <if>
            <not>
                <isset property="host.deploy_path"/>
            </not>
            <then>
                <fail message="Missing host.deploy_path property!"/>
            </then>
        </if>
        <if>
            <not>
                <isset property="git.url"/>
            </not>
            <then>
                <fail message="Missing git repository URL property!"/>
            </then>
        </if>
        <!-- Looking for optional properties -->
        <if>
            <not>
                <isset property="git.version"/>
            </not>
            <then>
                <property name="git.version"
                          value="stable"
                          override="true"/>
            </then>
        </if>

        <if>
            <not>
                <isset property="project"/>
            </not>
            <then>
                <property name="project"
                          value="myproject"
                          override="true"/>
            </then>
        </if>

        <if>
            <not>
                <isset property="tmp_dir"/>
            </not>
            <then>
                <property name="tmp_dir"
                          value="/tmp/${project}/"
                          override="true"/>
            </then>
        </if>

        <if>
            <not>
                <isset property="package_name"/>
            </not>
            <then>
                <property name="package_name"
                          value="${project}_${git.version}.tar"
                          override="true"/>
            </then>
        </if>

        <if>
            <not>
                <isset property="no-clean"/>
            </not>
            <then>
                <property name="no-clean"
                          value="false"
                          override="true"/>
            </then>
        </if>

        <exec command="php -r 'echo uniqid();'" outputProperty="release"/>
        <property name="ssh" value="ssh -A ${host.username}@${host.servername}"/>

        <echo message="The value of hostname has been set to '${host.servername}'"/>
        <echo message="The value of deploy path has been set to '${host.deploy_path}'"/>
        <echo message="The value of git repository URL has been set to '${git.url}'"/>
        <echo message="The value of Version has been set to '${git.version}'"/>
        <echo message="The value of project has been set to '${project}'"/>
        <echo message="The value of temp directory has been set to '${tmp_dir}'"/>
        <echo message="The value of package name has been set to '${package_name}'"/>
        <echo message="The value of release has been set to '${release}'"/>
    </target>

    <target name="deploy">
        <trycatch property="exception">
            <try>
                <phingcall target="start_release" inheritRefs="true" inheritAll="true">
                </phingcall>
                <fail message="[deploy] Test dependances"/>
            </try>
            <catch>
                <phingcall target="rollback" inheritAll="true" inheritRefs="true">
                    <property name="exception" value="${exception}"/>
                </phingcall>
            </catch>
        </trycatch>
    </target>

    <target name="start_release" depends="push_package"/>

    <target name="clone_repository" description="Clone Repository" depends="check:properties">
        <echo message="---> Cloning Repository"/>
        <trycatch property="exception">
            <try>
                <delete dir="${tmp_dir}" includeemptydirs="true" quiet="true" verbose="false"/>
                <mkdir dir="/tmp/${project}/"/>
                <!-- gitPath="/usr/local/git/bin/git" -->
                <gitclone
                        repository="${git.url}"
                        targetPath="${tmp_dir}"
                        />

                <gitcheckout
                        repository="${tmp_dir}"
                        branchname="${git.version}"
                        quiet="false"
                        forcecreate="true"
                        force="true"
                        />
            </try>
            <catch>
                <phingcall target="rollback" inheritAll="true" inheritRefs="true">
                    <property name="exception" value="[clone_repository] ${exception}"/>
                </phingcall>
                <fail message=""/>
            </catch>
        </trycatch>
    </target>

    <target name="generate_vendors" description="Generate vendors using composer" depends="clone_repository">
        <if>
            <not>
                <isset property="no-vendors"/>
            </not>
            <then>

                <echo message="---> Generating vendors"/>

                <!-- Check wget -->
                <exec command="which composer" outputProperty="bin.composer" returnProperty="requirement.composer"/>
                <if>
                    <equals arg1="${requirement.composer}" arg2="1"/>
                    <then>
                        <echo message="---***> Composer not found. Downloading it"/>
                        <exec
                                command="php -r &quot;readfile('https://getcomposer.org/installer');&quot; | php"
                                dir="${tmp_dir}"
                                checkreturn="true"/>
                        <property name="bin.composer" value="php composer.phar"/>
                    </then>
                </if>

                <echo message="---***> Composer found. Generating"/>
                <trycatch property="exception">
                    <try>
                        <exec
                                command="${bin.composer} install --no-dev --verbose --prefer-dist --optimize-autoloader --no-progress"
                                dir="${tmp_dir}"
                                checkreturn="true"/>
                    </try>
                    <catch>
                        <phingcall target="rollback" inheritAll="true" inheritRefs="true">
                            <property name="exception" value="[generate_vendors] ${exception}"/>
                        </phingcall>
                        <fail message=""/>
                    </catch>
                </trycatch>
            </then>
            <else>
                <echo message="Option : no-vendors activated"/>
            </else>
        </if>
    </target>

    <target name="build_package" description="Build Package..." depends="generate_vendors">
        <trycatch property="exception">
            <try>
                <echo message="${tmp_dir}"/>
                <tar destfile="${tmp_dir}/${package_name}" basedir="${tmp_dir}" compression="gzip"/>

                <available file="${tmp_dir}/${package_name}" property="packagefilefound" value="true"/>
                <fail unless="packagefilefound" message="Missing ${tmp_dir}/${package_name} file!"/>
            </try>
            <catch>
                <phingcall target="rollback" inheritAll="true" inheritRefs="true">
                    <property name="exception" value="[build_package] ${exception}"/>
                </phingcall>
                <fail message=""/>
            </catch>
        </trycatch>
    </target>

    <target name="push_package" description="Push package to server" depends="build_package">

        <echo message="---> Push package ${package_name} to ${host.servername} "/>
        <trycatch property="exception">
            <try>
                <echo message="---***> Creating release directory"/>
                <exec command="${ssh} 'mkdir -p ${host.deploy_path}/${project}/releases/${release}'"
                      returnProperty="check"/>
                <if>
                    <not>
                        <equals arg1="${check}" arg2="0"/>
                    </not>
                    <then>
                        <fail message="Remote release directory creation failed"/>
                    </then>
                </if>

                <echo message="---***> Transferring package"/>
                <exec command="scp ${tmp_dir}${package_name} ${host.username}@${host.servername}:${host.deploy_path}/${project}/releases/${package_name}"
                      returnProperty="check"/>
                <if>
                    <and>
                        <not>
                            <equals arg1="${check}" arg2="0"/>
                        </not>
                        <not>
                            <equals arg1="${check}" arg2="1"/>
                        </not>
                    </and>
                    <then>
                        <fail message="Transfer failed"/>
                    </then>
                </if>

                <echo message="---***> Deploying package"/>
                <exec command="${ssh} tar xf ${host.deploy_path}/${project}/releases/${package_name} -C ${host.deploy_path}/${project}/releases/${release}"
                      returnProperty="check"/>
                <if>
                    <not>
                        <equals arg1="${check}" arg2="0"/>
                    </not>
                    <then>
                        <fail message="Remote deployment failed"/>
                    </then>
                </if>

                <exec command="${ssh} ln -s ${host.deploy_path}/${project}/releases/${release} ${host.deploy_path}/${project}/current"
                      returnProperty="check"/>

                <if>
                    <isset property="${shared-files}"/>
                    <then>
                        <echo message="---***> Linking shared files"/>
                        <foreach list="${shared-files}" target="link-shared-files" param="file"/>
                    </then>
                </if>

                <echo message="---***> Fixing permissions"/>
                <exec command="${ssh} chown -R ${server.user}:${server.user} ${host.deploy_path}/${project}/releases/${release}"/>

                <echo message="---***> Deleting package file"/>
                <exec command="${ssh} rm ${host.deploy_path}/${project}/releases/${package_name}" checkreturn="true"/>
                <delete dir="${tmp_dir}" includeemptydirs="true" quiet="true" verbose="false"/>
                <exec command="${ssh} 'echo ${release} > ${host.deploy_path}/${project}/RELEASE'" checkreturn="true"/>

            </try>
            <catch>
                <phingcall target="rollback" inheritAll="true" inheritRefs="true">
                    <property name="exception" value="[push_package] ${exception}"/>
                </phingcall>
                <fail message=""/>
            </catch>
        </trycatch>
    </target>

    <!--
        <target name="send_notification" description="send notification">
            <mail tolist="${mail}" subject="Deploy ${project} complete" from="mail@myproject.com">
                Deploy Complete

                Deploy Tag: ${version}
                Modul: ${project}
                Servers: ${hostnames}
            </mail>
        </target>
    -->
    <target name="update:shared-files" depends="clone_repository">
        <foreach list="${shared-files}" param="file" target="sync-shared-files"/>
    </target>

    <target name="update:shared-files" depends="clone_repository">
        <foreach list="${shared-files}" param="file" target="sync-shared-files"/>
    </target>

    <target name="sync-shared-files">
        <exec command="${ssh} mkdir -p ${host.deploy_path}/${project}/shared/`dirname ${file}`"/>
        <exec command="scp ${tmp_dir}/${file} ${host.username}@${host.servername}:${host.deploy_path}/${project}/shared/${file}"/>
    </target>

    <target name="link-shared-files">
        <exec command="${ssh} ls ${host.deploy_path}/${project}/shared/${file}" returnProperty="check_exists"/>
        <if>
            <not>
                <equals arg1="${check_exists}" arg2="0"/>
            </not>
            <then>
                <fail message="Shared file ${file} not found"/>
            </then>
        </if>
        <exec command="${ssh} ln -s ${host.deploy_path}/${project}/shared/${file} ${host.deploy_path}/${project}/current/${file}"/>
    </target>

    <target name="rollback">
        <property name="status" value="${exception}" override="true"/>
        <if>
            <isfalse value="${no-clean}"/>
            <then>
                <if>
                    <or>
                        <contains string="${status}" substring="[push_package]"/>
                        <contains string="${status}" substring="[deploy]"/>
                    </or>
                    <then>
                        <exec passthru="true" outputProperty="oldRelease"
                              command="${ssh} 'cat ${host.deploy_path}/${project}/RELEASE 2>/dev/null'"/>
                        <echo message="---***> Rolling back to version ${oldRelease}"/>
                        <exec command="${ssh} ln -s ${host.deploy_path}/${project}/releases/${oldRelease} ${host.deploy_path}/${project}/current"/>

                        <echo message="---***> Deleting remote temporary directory"/>
                        <exec command="${ssh} rm -rf ${host.deploy_path}/${project}/releases/${release}"/>

                        <property name="status" value="[generate_vendors]" override="true"/>
                    </then>
                </if>
                <if>
                    <or>
                        <contains string="${status}" substring="[generate_vendors]"/>
                        <contains string="${status}" substring="[clone_repository]"/>
                    </or>
                    <then>
                        <echo message="---***> Deleting local temporary directory"/>
                        <delete dir="${tmp_dir}"/>
                        <property name="status" value="checkout" override="true"/>
                    </then>
                </if>
                <echo message="Rollback complete"/>
            </then>
        </if>
        <echo message="BUILD FAILED : ${exception}"/>
    </target>
</project>
